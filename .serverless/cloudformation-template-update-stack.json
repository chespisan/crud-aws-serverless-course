{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GetDashallDashusersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/crud-serverless-users-dev-get-all-users"
      }
    },
    "GetDashusersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/crud-serverless-users-dev-get-users"
      }
    },
    "CreateDashusersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/crud-serverless-users-dev-create-users"
      }
    },
    "UpdateDashusersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/crud-serverless-users-dev-update-users"
      }
    },
    "DeleteDashusersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/crud-serverless-users-dev-delete-users"
      }
    },
    "SignedURLLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/crud-serverless-users-dev-signedURL"
      }
    },
    "ThumbGeneratorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/crud-serverless-users-dev-thumbGenerator"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "crud-serverless-users",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/crud-serverless-users-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/crud-serverless-users-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:751824056806:table/usersTable"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": "arn:aws:s3:::bucket-serverles-course-23349/*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "crud-serverless-users",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "BaseLambdaLayer": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/crud-serverless-users/dev/1698181617229-2023-10-24T21:06:57.229Z/nodejs.zip"
        },
        "LayerName": "prd-dependencies",
        "CompatibleRuntimes": [
          "nodejs14.x"
        ]
      }
    },
    "GetDashallDashusersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/crud-serverless-users/dev/1698181617229-2023-10-24T21:06:57.229Z/get-all-users.zip"
        },
        "Handler": "getAllUsers/handler.getAllUsers",
        "Runtime": "nodejs14.x",
        "FunctionName": "crud-serverless-users-dev-get-all-users",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BUCKET": "bucket-serverles-course-23349"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashallDashusersLogGroup"
      ]
    },
    "GetDashusersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/crud-serverless-users/dev/1698181617229-2023-10-24T21:06:57.229Z/get-users.zip"
        },
        "Handler": "getUsers/handler.getUsers",
        "Runtime": "nodejs14.x",
        "FunctionName": "crud-serverless-users-dev-get-users",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BUCKET": "bucket-serverles-course-23349"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDashusersLogGroup"
      ]
    },
    "CreateDashusersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/crud-serverless-users/dev/1698181617229-2023-10-24T21:06:57.229Z/create-users.zip"
        },
        "Handler": "createUsers/handler.createUsers",
        "Runtime": "nodejs14.x",
        "FunctionName": "crud-serverless-users-dev-create-users",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BUCKET": "bucket-serverles-course-23349"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateDashusersLogGroup"
      ]
    },
    "UpdateDashusersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/crud-serverless-users/dev/1698181617229-2023-10-24T21:06:57.229Z/update-users.zip"
        },
        "Handler": "updateUsers/handler.updateUsers",
        "Runtime": "nodejs14.x",
        "FunctionName": "crud-serverless-users-dev-update-users",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BUCKET": "bucket-serverles-course-23349"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateDashusersLogGroup"
      ]
    },
    "DeleteDashusersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/crud-serverless-users/dev/1698181617229-2023-10-24T21:06:57.229Z/delete-users.zip"
        },
        "Handler": "deleteUsers/handler.deleteUsers",
        "Runtime": "nodejs14.x",
        "FunctionName": "crud-serverless-users-dev-delete-users",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BUCKET": "bucket-serverles-course-23349"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteDashusersLogGroup"
      ]
    },
    "SignedURLLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/crud-serverless-users/dev/1698181617229-2023-10-24T21:06:57.229Z/signedURL.zip"
        },
        "Handler": "signedurl/handler.signedS3URL",
        "Runtime": "nodejs14.x",
        "FunctionName": "crud-serverless-users-dev-signedURL",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BUCKET": "bucket-serverles-course-23349"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignedURLLogGroup"
      ]
    },
    "ThumbGeneratorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/crud-serverless-users/dev/1698181617229-2023-10-24T21:06:57.229Z/thumbGenerator.zip"
        },
        "Handler": "thumbnail/handler.thumbnailGenerator",
        "Runtime": "nodejs14.x",
        "FunctionName": "crud-serverless-users-dev-thumbGenerator",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BUCKET": "bucket-serverles-course-23349"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "BaseLambdaLayer"
          }
        ]
      },
      "DependsOn": [
        "ThumbGeneratorLogGroup"
      ]
    },
    "GetDashallDashusersLambdaVersionVae3Yz2JISYWrVANqXH1KWGykTWkBJ4hr9mkamsMvg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashallDashusersLambdaFunction"
        },
        "CodeSha256": "VxyjPlzXOKoTNyNbUg4GXTEfHaBeyZQg+KkSBi8bwpM="
      }
    },
    "GetDashusersLambdaVersionyitsGHUSMklGozr6kkWv2EZlLMuP5SS5SuSQTlQIY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashusersLambdaFunction"
        },
        "CodeSha256": "vY228U8qQOGB0a3KqJz2WkZYoex7PjeO6cNWzQis8Ls="
      }
    },
    "CreateDashusersLambdaVersionqlGiLmoMSdbmwCUxK815EJjLRKQFnatYVxqI3nU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateDashusersLambdaFunction"
        },
        "CodeSha256": "7MEV4XReHCSCFLhW9THjh0e2PepZ0QYLuJ7EivagzoU="
      }
    },
    "DeleteDashusersLambdaVersionqWZX90CMwUG6OQOyOAYlDXOaZJBdpUfTeqb7zHcR4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteDashusersLambdaFunction"
        },
        "CodeSha256": "MrD9ijbfQ4qi7TMfBDypOIYqTy2Uc9RxigvWp1qPCKA="
      }
    },
    "UpdateDashusersLambdaVersioncSp8TS8FxDS1krIyBl6ygaQZ82isRkqIgwnur4Ng": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateDashusersLambdaFunction"
        },
        "CodeSha256": "d8cI3OMm2USQqZaB7kb9WFFAIruCAsrqMEl5gN0HgoQ="
      }
    },
    "SignedURLLambdaVersionjoqg9u1BqlkDIHn8eag0OWyazxPUFD8bRbJWbimhc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignedURLLambdaFunction"
        },
        "CodeSha256": "hR4kiEjp269a68HxFLP/TFnjX5bZFZqILggD08nAZKk="
      }
    },
    "ThumbGeneratorLambdaVersionHq3v7vRJ7WNcL30QEUCllPCN6q5zcXdVkBx3kgzNeA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ThumbGeneratorLambdaFunction"
        },
        "CodeSha256": "8dfvqZwPVCjmedcbL9zLBM6o/1UyGG3pijIHs61FRPQ="
      }
    },
    "ThumbGeneratorCustomS31": {
      "Type": "Custom::S3",
      "Version": 1,
      "DependsOn": [
        "ThumbGeneratorLambdaFunction",
        "CustomDashresourceDashexistingDashs3LambdaFunction"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashexistingDashs3LambdaFunction",
            "Arn"
          ]
        },
        "FunctionName": "crud-serverless-users-dev-thumbGenerator",
        "BucketName": "bucket-serverles-course-23349",
        "BucketConfigs": [
          {
            "Event": "s3:ObjectCreated:*",
            "Rules": [
              {
                "Prefix": "uploads/"
              }
            ]
          }
        ]
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "crud-serverless-users",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "s3",
                        "",
                        "",
                        "bucket-serverles-course-23349"
                      ]
                    ]
                  },
                  "Action": [
                    "s3:PutBucketNotification",
                    "s3:GetBucketNotification"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "lambda",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "function",
                        "*"
                      ]
                    ]
                  },
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashexistingDashs3LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/crud-serverless-users/dev/1698181617229-2023-10-24T21:06:57.229Z/custom-resources.zip"
        },
        "FunctionName": "crud-serverless-users-dev-custom-resource-existing-s3",
        "Handler": "s3/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs16.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-crud-serverless-users",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSignedurl": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "signedurl",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashallDashusersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetDashallDashusersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.path.id": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashusersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
        }
      },
      "DependsOn": [
        "GetDashusersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateDashusersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodUsersPostApplicationJsonModel"
          }
        }
      },
      "DependsOn": [
        "CreateDashusersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersIdVarPatch": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PATCH",
        "RequestParameters": {
          "method.request.path.id": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateDashusersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodUsersIdVarPatchApplicationJsonModel"
          }
        }
      },
      "DependsOn": [
        "UpdateDashusersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {
          "method.request.path.id": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteDashusersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
        }
      },
      "DependsOn": [
        "DeleteDashusersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSignedurlGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.querystring.filename": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSignedurl"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignedURLLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
        }
      },
      "DependsOn": [
        "SignedURLLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayCrudserverlessusersRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
        "Name": "crud-serverless-users-dev | Validate request body and querystring parameters"
      }
    },
    "ApiGatewayMethodUsersPostApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "User",
          "type": "object",
          "required": [
            "name",
            "age"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The person's first name."
            },
            "age": {
              "description": "Age in years which must be equal to or greater than zero.",
              "type": "integer",
              "minimum": 18
            }
          }
        }
      }
    },
    "ApiGatewayMethodUsersIdVarPatchApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "User",
          "type": "object",
          "required": [
            "name",
            "age"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The person's first name."
            },
            "age": {
              "description": "Age in years which must be equal to or greater than zero.",
              "type": "integer",
              "minimum": 18
            }
          }
        }
      }
    },
    "ApiGatewayDeployment1698181616343": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodUsersGet",
        "ApiGatewayMethodUsersIdVarGet",
        "ApiGatewayMethodUsersPost",
        "ApiGatewayMethodUsersIdVarPatch",
        "ApiGatewayMethodUsersIdVarDelete",
        "ApiGatewayMethodSignedurlGet"
      ]
    },
    "GetDashallDashusersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashallDashusersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashusersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashusersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateDashusersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateDashusersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateDashusersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateDashusersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteDashusersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteDashusersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SignedURLLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignedURLLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "usersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "usersTable",
        "AttributeDefinitions": [
          {
            "AttributeName": "pk",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "pk",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "ObjectWriter"
            }
          ]
        },
        "BucketName": "bucket-serverles-course-23349"
      }
    },
    "SampleBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "S3Bucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "s3:GetObject"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3Bucket"
                    },
                    "/*"
                  ]
                ]
              },
              "Principal": "*"
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-crud-serverless-users-dev-ServerlessDeploymentBucketName"
      }
    },
    "BaseLambdaLayerQualifiedArn": {
      "Description": "Current Lambda layer version",
      "Value": {
        "Ref": "BaseLambdaLayer"
      },
      "Export": {
        "Name": "sls-crud-serverless-users-dev-BaseLambdaLayerQualifiedArn"
      }
    },
    "BaseLambdaLayerHash": {
      "Description": "Current Lambda layer hash",
      "Value": "d5358b51db7cc219dbfbb7b153e091991724aab8",
      "Export": {
        "Name": "sls-crud-serverless-users-dev-BaseLambdaLayerHash"
      }
    },
    "BaseLambdaLayerS3Key": {
      "Description": "Current Lambda layer S3Key",
      "Value": "serverless/crud-serverless-users/dev/1698181617229-2023-10-24T21:06:57.229Z/nodejs.zip",
      "Export": {
        "Name": "sls-crud-serverless-users-dev-BaseLambdaLayerS3Key"
      }
    },
    "GetDashallDashusersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashallDashusersLambdaVersionVae3Yz2JISYWrVANqXH1KWGykTWkBJ4hr9mkamsMvg"
      },
      "Export": {
        "Name": "sls-crud-serverless-users-dev-GetDashallDashusersLambdaFunctionQualifiedArn"
      }
    },
    "GetDashusersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashusersLambdaVersionyitsGHUSMklGozr6kkWv2EZlLMuP5SS5SuSQTlQIY"
      },
      "Export": {
        "Name": "sls-crud-serverless-users-dev-GetDashusersLambdaFunctionQualifiedArn"
      }
    },
    "CreateDashusersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateDashusersLambdaVersionqlGiLmoMSdbmwCUxK815EJjLRKQFnatYVxqI3nU"
      },
      "Export": {
        "Name": "sls-crud-serverless-users-dev-CreateDashusersLambdaFunctionQualifiedArn"
      }
    },
    "DeleteDashusersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteDashusersLambdaVersionqWZX90CMwUG6OQOyOAYlDXOaZJBdpUfTeqb7zHcR4"
      },
      "Export": {
        "Name": "sls-crud-serverless-users-dev-DeleteDashusersLambdaFunctionQualifiedArn"
      }
    },
    "UpdateDashusersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateDashusersLambdaVersioncSp8TS8FxDS1krIyBl6ygaQZ82isRkqIgwnur4Ng"
      },
      "Export": {
        "Name": "sls-crud-serverless-users-dev-UpdateDashusersLambdaFunctionQualifiedArn"
      }
    },
    "SignedURLLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignedURLLambdaVersionjoqg9u1BqlkDIHn8eag0OWyazxPUFD8bRbJWbimhc"
      },
      "Export": {
        "Name": "sls-crud-serverless-users-dev-SignedURLLambdaFunctionQualifiedArn"
      }
    },
    "ThumbGeneratorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ThumbGeneratorLambdaVersionHq3v7vRJ7WNcL30QEUCllPCN6q5zcXdVkBx3kgzNeA"
      },
      "Export": {
        "Name": "sls-crud-serverless-users-dev-ThumbGeneratorLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-crud-serverless-users-dev-ServiceEndpoint"
      }
    }
  }
}